[package]
name = "microweb"
version = "0.1.0"
edition = "2024"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
iter_tools = "0.29.0"
leptos = { version = "0.8.2", features = ["nightly"] }
leptos_router = { version = "0.8.2", features = ["nightly"] }
leptos-use = { version = "0.16.0-beta", features = ["use_cookie", "use_interval"]}
console_error_panic_hook = { version = "0.1", optional = true}
leptos_meta = { version = "0.8.2" }
wasm-bindgen = { version = "=0.2.100", optional = true }
serde = "1.0.219"
serde_json = "1.0.140"
chrono = { version = "0.4.40", features = ["serde"] }
ammonia = { version = "4.0.0" }
regex = { version = "1.11.1" }
web-sys = { version = "0.3", features = ["Document", "Window"] }
codee = { version = "0.3.0", features = ["json_serde"] }
icondata = { version = "0.5.0", features = ["serde"]}
pulldown-cmark = { version = "0.13.0" }
syntect = { version = "5.2", default-features = false, features = ["default-fancy"] }
flate2 = { version = "1.1.0" }
rss = { version = "2.0.12" }
log = { version = "0.4.27", optional = true }
leptos_axum = { version = "0.8.2", optional = true }
axum = { version = "0.8.4", optional = true }
axum-extra = { version = "0.10.0", features = ["typed-header"], optional = true }
uuid = { version = "1.16.0", features = ["v4"], optional = true }
tower-http = { version = "0.6.1", features = ["fs", "trace", "cors"], optional = true }
sqlx = { version = "0.8.2", features = ["chrono", "runtime-tokio", "postgres", "tls-native-tls"], optional = true }
dotenvy = { version = "0.15.7", optional = true }
jsonwebtoken = { version = "9.3.0", optional = true }
tokio = { version = "1", features = ["rt-multi-thread"], optional = true }
tracing-subscriber = { version = "0.3.19", features = ["fmt"] }
tracing = "0.1.41"
tracing-wasm = { version = "0.2", optional = true }
rand = "0.9.1"
getrandom = { version = "0.3", features = ["wasm_js"] }
bcrypt = { version = "0.17.0", optional = true }
reactive_stores = "0.2.2"
tower = { version = "0.5.2", optional = true }
chrono-tz = "0.10.3"
qrcode = "0.14.1"
urlencoding = "2.1.3"
strum = { version = "0.27.1", features = ["derive"] }
dotenvy_macro = "0.15.7"

[features]
default = ["ssr", "hydrate"]
hydrate = [
    "leptos/hydrate",
    "dep:console_error_panic_hook",
    "dep:wasm-bindgen",
    "dep:tracing-wasm",
]
ssr = [
    "dep:axum",
    "dep:axum-extra",
    "dep:bcrypt",
    "dep:leptos_axum",
    "dep:tokio",
    "dep:uuid",
    "dep:tower-http",
    "dep:tower",
    "dep:sqlx",
    "dep:uuid",
    "dep:dotenvy",
    "dep:jsonwebtoken",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "leptos-use/ssr",
    "leptos-use/axum",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "microweb"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
