[package]
name = "microweb"
version = "0.1.0"
edition = "2024"

[lib]
crate-type = ["cdylib", "rlib"]

[workspace]
members = ["crates/auth", "crates/blog","crates/common", "crates/files", "crates/sandbox", "crates/www"]

[workspace.dependencies]
# leptos
leptos = { version = "0.8.12", features = ["nightly"] }
leptos_router = { version = "0.8.9", features = ["nightly"] }
leptos-use = { version = "0.16.3", features = ["use_cookie", "use_interval"]}
leptos_meta = { version = "0.8.5" }
leptos_axum = { version = "0.8.6" }
reactive_stores = "0.3.0"
# axum
axum = { version = "0.8.6" }
axum-extra = { version = "0.10.3", features = ["typed-header"] }
tower-http = { version = "0.6.6", features = ["fs", "trace", "cors"] }
# database
sqlx = { version = "0.8.6", features = ["chrono", "runtime-tokio", "postgres", "tls-native-tls", "uuid"] }
# serde
serde = "1.0.228"
serde_json = "1.0.145"
# chrono
chrono = { version = "0.4.42", features = ["serde"] }
chrono-tz = "0.10.4"
# rest
codee = { version = "0.3.3", features = ["json_serde"] }
strum = { version = "0.27.2", features = ["derive"] }
tracing = "0.1.41"
thiserror = { version = "2.0.17" }
uuid = { version = "1.17.0", features = ["v4", "serde"] }
tokio = { version = "1.48.0", features = ["rt-multi-thread"] }
zip = { version = "6.0.0" }
jsonwebtoken = { version = "9.3.1" }
mime_guess = { version = "2.0.5" }
bcrypt = { version = "0.17.1" }
regex = { version = "1.12.2" }
icondata = { version = "0.6.0", features = ["serde"]}
rand = "0.9.2"
flate2 = { version = "1.1.5" }
pulldown-cmark = { version = "0.13.0" }
syntect = { version = "5.3.0", default-features = false, features = ["default-fancy"] }
rss = { version = "2.0.12" }
ammonia = { version = "4.1.2" }

# own
common = { path = "./crates/common", default-features = false, version = "*" }
files = { path = "./crates/files", version = "*" }
sandbox = { path = "./crates/sandbox", version = "*" }
auth = { path = "./crates/auth", default-features = false, version = "*" }
www = { path = "./crates/www", default-features = false, version = "*" }
blog = { path = "./crates/blog", default-features = false, version = "*" }

[dependencies]
# leptos
leptos = { workspace = true, optional = true }
leptos_axum = { workspace = true, optional = true }

# tracing
tracing.workspace = true
tracing-subscriber = { version = "0.3.20", features = ["fmt"] }
tracing-wasm = { version = "0.2", optional = true }
console_error_panic_hook = { version = "0.1", optional = true}

# backend
axum = { workspace = true, optional = true }
tower = { version = "0.5.2", optional = true }
tower-http = { workspace = true , optional = true }
tokio = { workspace = true, optional = true }
dotenvy = { version = "0.15.7", optional = true }
dotenvy_macro = "0.15.7"

# frontend
wasm-bindgen = { version = "0.2.105", optional = true }
# this is needed for random to work on web
getrandom = { version = "0.3.4", features = ["wasm_js"] }

# own
common.workspace = true
files = { workspace = true, optional = true }
sandbox = { workspace = true, optional = true }
auth.workspace = true
www.workspace = true
blog.workspace = true


[features]
default = ["ssr", "hydrate"]
hydrate = [
    "leptos/hydrate",
    "common/front",
    "auth/front",
    "www/front",
    "blog/front",
    "dep:console_error_panic_hook",
    "dep:wasm-bindgen",
    "dep:tracing-wasm",
]
ssr = [
    "leptos/ssr",
    "common/back",
    "auth/back",
    "www/back",
    "blog/back",
    "dep:axum",
    "dep:leptos",
    "dep:leptos_axum",
    "dep:tokio",
    "dep:tower-http",
    "dep:tower",
    "dep:dotenvy",
    "dep:files",
    "dep:sandbox",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "microweb"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
